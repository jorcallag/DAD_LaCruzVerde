package ProyectoDad.LaCruzVerde;

import java.util.Calendar;
import java.util.Random;

import io.netty.handler.codec.mqtt.MqttConnectReturnCode;
import io.netty.handler.codec.mqtt.MqttQoS;
import io.vertx.core.AbstractVerticle;
import io.vertx.core.Promise;
import io.vertx.core.buffer.Buffer;
import io.vertx.core.json.Json;
import io.vertx.mqtt.MqttClient;
import io.vertx.mqtt.MqttClientOptions;
import io.vertx.mqtt.impl.MqttClientImpl;
import types.sensor_valor;

public class MqttClientVerticle_LaCruzVerde extends AbstractVerticle{
	
	private String classInstanceId;

	public void start (Promise<Void> promise) {
		MqttClientOptions mqttClientOptions	= new MqttClientOptions();
		mqttClientOptions.setAutoKeepAlive(true);
		mqttClientOptions.setAutoGeneratedClientId(false);
		mqttClientOptions.setClientId(classInstanceId);
		mqttClientOptions.setConnectTimeout(10000);
		mqttClientOptions.setKeepAliveTimeSeconds(10);
		mqttClientOptions.setReconnectAttempts(10);
		mqttClientOptions.setReconnectInterval(5000);
		mqttClientOptions.setUsername("mqttbroker");
		mqttClientOptions.setPassword("mqttbrokerpass");
		MqttClient mqttClient = new MqttClientImpl(vertx, mqttClientOptions);
		
		mqttClient.publishHandler(messageReceivedHandler -> {
			System.out.println(messageReceivedHandler.payload().toString());
		});
		
		mqttClient.connect(1885, "localhost", handler -> {
			if(handler.result().code() == MqttConnectReturnCode.CONNECTION_ACCEPTED) {
				mqttClient.subscribe(MqttServerVerticle_LaCruzVerde.TOPIC_DOMO, MqttQoS.AT_LEAST_ONCE.value(), handlerSubscribe -> {
					if(handlerSubscribe.succeeded()) {
						System.out.println(classInstanceId + " subscribed to " + MqttServerVerticle_LaCruzVerde.TOPIC_DOMO + " topic");
						vertx.setPeriodic(8000, periodic -> {
							Random random = new Random();
							sensor_valor sensor_valor = new sensor_valor(1, 1, 37 + random.nextInt(10), 2 + random.nextInt(5), Calendar.getInstance().getTimeInMillis());
							mqttClient.publish(MqttServerVerticle_LaCruzVerde.TOPIC_DOMO, Buffer.buffer(Json.encodePrettily(sensor_valor)),
									MqttQoS.AT_LEAST_ONCE, false, true);
						});
					}else {
						System.out.println(classInstanceId + " NOT subscribe to " + MqttServerVerticle_LaCruzVerde.TOPIC_DOMO + " topic");
					}
				});
			}else {
				System.out.println("Error: " + handler.result().code());
			}
		});
	}
}
